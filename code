#include <gtk/gtk.h> 
 
GtkWidget *buttons[3][3]; int board[3][3]; int currentPlayer = 1; gboolean gameOver = FALSE; 
GtkWidget *statusLabel; 
 
static void check_game_status(); static int check_winner();  
 
static void on_button_clicked(GtkWidget *button, gpointer data) {     if (!gameOver) {         int row, col; 
     row=GPOINTER_TO_INT(g_object_get_data(G_OBJECT(button), 
                                                                                                   "row")); 
 
     col=GPOINTER_TO_INT(g_object_get_data(G_OBJECT(button),                   
                                                                                                "col")); 
 
        if (board[row][col] == 0) {             board[row][col] = currentPlayer; 
            gtk_button_set_label(GTK_BUTTON(button),(currentPlayer 
                                                                                   == 1) ? "X" : "O"); 
            gtk_widget_set_sensitive(button, FALSE);             currentPlayer = 3 - currentPlayer; 
            
gtk_label_set_text(GTK_LABEL(statusLabel),(currentPlayer=1)                            
                               ?   "Player X's turn" : "Player O's turn");             check_game_status(); 
        } 
    } 
} 
 
static void check_game_status() { 
    int winner = check_winner();     if (winner != 0) {         if (winner == 1) { 
            
gtk_label_set_text(GTK_LABEL(statusLabel),"PlayerXwins!"); 
        } else if (winner == 2) { 
            
gtk_label_set_text(GTK_LABEL(statusLabel),"PlayerOwins!"); 
        } else { 
            gtk_label_set_text(GTK_LABEL(statusLabel), "It's a draw!"); 
        } 
        gameOver = TRUE; 
    } 
} 
 
static int check_winner() {     for (int i = 0; i < 3; ++i) { 
        if (board[i][0] == board[i][1] && board[i][1] == board[i][2] &&  
                                                                                       board[i][0] != 0) 
{ 
 
            return board[i][0]; 
        } 
        if (board[0][i] == board[1][i] && board[1][i] == board[2][i] &&                                                                               board[0][i] != 0) {             return board[0][i]; 
        } 
    } 
    if (board[0][0] == board[1][1] && board[1][1] == board[2][2] &&  
                                                                      board[0][0] != 0) {         return board[0][0]; 
    } 
    if (board[0][2] == board[1][1] && board[1][1] == board[2][0] &&  
                                                                     board[0][0] != 0) {         return board[0][2]; 
    } 
    for (int i = 0; i < 3; ++i) {         for (int j = 0; j < 3; ++j) {             if (board[i][j] == 0) {                 return 0; 
            } 
        }     } 
    return -1; // It's a draw 
} 
 
static void reset_game(GtkWidget *button, gpointer data) {     for (int i = 0; i < 3; ++i) { 
        for (int j = 0; j < 3; ++j) {             board[i][j] = 0; 
            gtk_button_set_label(GTK_BUTTON(buttons[i][j]), "");             gtk_widget_set_sensitive(buttons[i][j], TRUE); 
        } 
    } 
    currentPlayer = 1;     gameOver = FALSE; 
    gtk_label_set_text(GTK_LABEL(statusLabel), "Player X's turn"); } 
 
int main(int argc, char *argv[]) { 
    GtkWidget *window; 
    GtkWidget *grid; 
    GtkWidget *resetButton; 
 
    gtk_init(&argc, &argv); 
 
    window = gtk_window_new(GTK_WINDOW_TOPLEVEL);     gtk_window_set_title(GTK_WINDOW(window), "Tic-Tac-Toe");     g_signal_connect(G_OBJECT(window),"destroy",    
                                              G_CALLBACK(gtk_main_quit), NULL);              grid = gtk_grid_new(); 
    gtk_container_add(GTK_CONTAINER(window), grid); 
 
    for (int i = 0; i < 3; ++i) {         for (int j = 0; j < 3; ++j) {             buttons[i][j] = gtk_button_new(); 
            gtk_widget_set_size_request(buttons[i][j], 100, 100);             gtk_grid_attach(GTK_GRID(grid), buttons[i][j], j, i, 1, 1);             g_object_set_data(G_OBJECT(buttons[i][j]),"row", 
                                                                   GINT_TO_POINTER(i));             g_object_set_data(G_OBJECT(buttons[i][j]),"col",  
                                                                   GINT_TO_POINTER(j));             g_signal_connect(G_OBJECT(buttons[i][j]),"clicked",  
                                        G_CALLBACK(on_button_clicked), NULL); 
 
        } 
    } 
 
    statusLabel = gtk_label_new("Player X's turn");     gtk_grid_attach(GTK_GRID(grid), statusLabel, 0, 3, 3, 1); 
 
    resetButton = gtk_button_new_with_label("Reset Game");     g_signal_connect(G_OBJECT(resetButton),"clicked",  
                                    G_CALLBACK(reset_game), NULL); 
 
    gtk_grid_attach(GTK_GRID(grid), resetButton, 0, 4, 3, 1);     gtk_widget_show_all(window); 
 
    gtk_main(); 
 
    return 0; 
} 
